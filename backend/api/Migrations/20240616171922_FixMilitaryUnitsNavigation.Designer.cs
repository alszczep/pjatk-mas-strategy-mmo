// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.DataAccess;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20240616171922_FixMilitaryUnitsNavigation")]
    partial class FixMilitaryUnitsNavigation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mas")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assistant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VillageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "VillageId");

                    b.HasIndex("VillageId");

                    b.ToTable("Assistant", "mas");
                });

            modelBuilder.Entity("MilitaryUnitTrainableInBarracks", b =>
                {
                    b.Property<Guid>("BuildingBarracksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MilitaryUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BuildingBarracksId", "MilitaryUnitId");

                    b.HasIndex("MilitaryUnitId");

                    b.ToTable("MilitaryUnitTrainableInBarracks", "mas");

                    b.HasData(
                        new
                        {
                            BuildingBarracksId = new Guid("00000000-0000-0000-0000-000000000005"),
                            MilitaryUnitId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BuildingBarracksId = new Guid("00000000-0000-0000-0000-000000000005"),
                            MilitaryUnitId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            BuildingBarracksId = new Guid("00000000-0000-0000-0000-000000000006"),
                            MilitaryUnitId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            BuildingBarracksId = new Guid("00000000-0000-0000-0000-000000000006"),
                            MilitaryUnitId = new Guid("00000000-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("api.Models.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxInVillage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Building", "mas");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Models.BuildingInVillage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuildingSpot")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid>("VillageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("VillageId");

                    b.ToTable("BuildingInVillage", "mas", t =>
                        {
                            t.HasCheckConstraint("CK_BuildingInVillage_BuildingSpot", "BuildingSpot >= 0 AND BuildingSpot <= 9");
                        });
                });

            modelBuilder.Entity("api.Models.BuildingLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuildingTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid>("ResourcesCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourcesProductionPerMinuteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TrainingTimeShortenedPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ResourcesCostId")
                        .IsUnique();

                    b.HasIndex("ResourcesProductionPerMinuteId")
                        .IsUnique()
                        .HasFilter("[ResourcesProductionPerMinuteId] IS NOT NULL");

                    b.ToTable("BuildingLevel", "mas", t =>
                        {
                            t.HasCheckConstraint("CK_BuildingLevel_TrainingTimeShortenedPercentage", "TrainingTimeShortenedPercentage >= 0 AND TrainingTimeShortenedPercentage < 100");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000001"),
                            BuildingTimeInSeconds = 60,
                            Level = 1,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000002"),
                            TrainingTimeShortenedPercentage = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000001"),
                            BuildingTimeInSeconds = 150,
                            Level = 2,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000004"),
                            TrainingTimeShortenedPercentage = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000002"),
                            BuildingTimeInSeconds = 60,
                            Level = 1,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000006"),
                            TrainingTimeShortenedPercentage = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000002"),
                            BuildingTimeInSeconds = 150,
                            Level = 2,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000008"),
                            TrainingTimeShortenedPercentage = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000003"),
                            BuildingTimeInSeconds = 60,
                            Level = 1,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000010"),
                            TrainingTimeShortenedPercentage = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000003"),
                            BuildingTimeInSeconds = 150,
                            Level = 2,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000011"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000012"),
                            TrainingTimeShortenedPercentage = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000004"),
                            BuildingTimeInSeconds = 60,
                            Level = 1,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000013"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000014"),
                            TrainingTimeShortenedPercentage = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000004"),
                            BuildingTimeInSeconds = 150,
                            Level = 2,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000015"),
                            ResourcesProductionPerMinuteId = new Guid("00000000-0000-0000-0000-000000000016"),
                            TrainingTimeShortenedPercentage = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000005"),
                            BuildingTimeInSeconds = 60,
                            Level = 1,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000017"),
                            TrainingTimeShortenedPercentage = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000005"),
                            BuildingTimeInSeconds = 150,
                            Level = 2,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000018"),
                            TrainingTimeShortenedPercentage = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000006"),
                            BuildingTimeInSeconds = 90,
                            Level = 1,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000019"),
                            TrainingTimeShortenedPercentage = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000006"),
                            BuildingTimeInSeconds = 200,
                            Level = 2,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000020"),
                            TrainingTimeShortenedPercentage = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            BuildingId = new Guid("00000000-0000-0000-0000-000000000006"),
                            BuildingTimeInSeconds = 500,
                            Level = 3,
                            ResourcesCostId = new Guid("00000000-0000-0000-0000-000000000021"),
                            TrainingTimeShortenedPercentage = 20
                        });
                });

            modelBuilder.Entity("api.Models.BuildingsQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingInVillageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LevelAfterUpgrade")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuildingInVillageId");

                    b.ToTable("BuildingsQueue", "mas");
                });

            modelBuilder.Entity("api.Models.Location", b =>
                {
                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<int?>("AllResourcesProductionPercentageLoss")
                        .HasColumnType("int");

                    b.Property<int?>("GoldProductionBonus")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryUnitsDefensePercentageBonus")
                        .HasColumnType("int");

                    b.HasKey("PositionX", "PositionY");

                    b.ToTable("Location", "mas", t =>
                        {
                            t.HasCheckConstraint("CK_Location_AllResourcesProductionPercentageLoss", "AllResourcesProductionPercentageLoss >= 0");

                            t.HasCheckConstraint("CK_Location_GoldProductionBonus", "GoldProductionBonus >= 0");

                            t.HasCheckConstraint("CK_Location_MilitaryUnitsDefensePercentageBonus", "MilitaryUnitsDefensePercentageBonus >= 0");
                        });

                    b.HasData(
                        new
                        {
                            PositionX = 0,
                            PositionY = 0,
                            MilitaryUnitsDefensePercentageBonus = 0
                        },
                        new
                        {
                            PositionX = 0,
                            PositionY = 1,
                            GoldProductionBonus = 10,
                            MilitaryUnitsDefensePercentageBonus = 10
                        },
                        new
                        {
                            PositionX = 1,
                            PositionY = 0,
                            AllResourcesProductionPercentageLoss = 10,
                            MilitaryUnitsDefensePercentageBonus = 20
                        },
                        new
                        {
                            PositionX = 1,
                            PositionY = 1,
                            AllResourcesProductionPercentageLoss = 10,
                            GoldProductionBonus = 10,
                            MilitaryUnitsDefensePercentageBonus = 0
                        },
                        new
                        {
                            PositionX = 2,
                            PositionY = 0,
                            GoldProductionBonus = 20,
                            MilitaryUnitsDefensePercentageBonus = 0
                        },
                        new
                        {
                            PositionX = 2,
                            PositionY = 1,
                            AllResourcesProductionPercentageLoss = 20,
                            MilitaryUnitsDefensePercentageBonus = 20
                        },
                        new
                        {
                            PositionX = 2,
                            PositionY = 2,
                            MilitaryUnitsDefensePercentageBonus = 10
                        });
                });

            modelBuilder.Entity("api.Models.MilitaryUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinBarracksLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("TrainingCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TrainingTimeInSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCostId")
                        .IsUnique();

                    b.ToTable("MilitaryUnit", "mas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Attack = 10,
                            Defense = 10,
                            IconUrl = "http://localhost:4200/units/swordsman.bmp",
                            MinBarracksLevel = 2,
                            Name = "Swordsman",
                            TrainingCostId = new Guid("00000000-0000-0000-0000-000000000022"),
                            TrainingTimeInSeconds = 10
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Attack = 15,
                            Defense = 5,
                            IconUrl = "http://localhost:4200/units/archer.bmp",
                            MinBarracksLevel = 1,
                            Name = "Archer",
                            TrainingCostId = new Guid("00000000-0000-0000-0000-000000000023"),
                            TrainingTimeInSeconds = 15
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Attack = 20,
                            Defense = 25,
                            IconUrl = "http://localhost:4200/units/knight.bmp",
                            MinBarracksLevel = 1,
                            Name = "Knight",
                            TrainingCostId = new Guid("00000000-0000-0000-0000-000000000024"),
                            TrainingTimeInSeconds = 40
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Attack = 40,
                            Defense = 20,
                            IconUrl = "http://localhost:4200/units/knight_on_horseback.bmp",
                            MinBarracksLevel = 3,
                            Name = "Knight on horseback",
                            TrainingCostId = new Guid("00000000-0000-0000-0000-000000000025"),
                            TrainingTimeInSeconds = 60
                        });
                });

            modelBuilder.Entity("api.Models.MilitaryUnitsInVillage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("MilitaryUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VillageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MilitaryUnitId");

                    b.HasIndex("VillageId");

                    b.ToTable("MilitaryUnitsInVillage", "mas");
                });

            modelBuilder.Entity("api.Models.MilitaryUnitsQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MilitaryUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VillageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MilitaryUnitId");

                    b.HasIndex("VillageId");

                    b.ToTable("MilitaryUnitsQueue", "mas");
                });

            modelBuilder.Entity("api.Models.Resources", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("Iron")
                        .HasColumnType("int");

                    b.Property<int>("Wheat")
                        .HasColumnType("int");

                    b.Property<int>("Wood")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resources", "mas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Gold = 10,
                            Iron = 20,
                            Wheat = 0,
                            Wood = 100
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Gold = 1,
                            Iron = 0,
                            Wheat = 0,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Gold = 15,
                            Iron = 25,
                            Wheat = 0,
                            Wood = 120
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Gold = 2,
                            Iron = 0,
                            Wheat = 0,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Gold = 20,
                            Iron = 10,
                            Wheat = 0,
                            Wood = 100
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Gold = 0,
                            Iron = 1,
                            Wheat = 0,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Gold = 25,
                            Iron = 15,
                            Wheat = 0,
                            Wood = 120
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Gold = 0,
                            Iron = 2,
                            Wheat = 0,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Gold = 0,
                            Iron = 0,
                            Wheat = 5,
                            Wood = 120
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Gold = 0,
                            Iron = 0,
                            Wheat = 1,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Gold = 0,
                            Iron = 0,
                            Wheat = 10,
                            Wood = 150
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Gold = 0,
                            Iron = 0,
                            Wheat = 2,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Gold = 8,
                            Iron = 10,
                            Wheat = 15,
                            Wood = 60
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Gold = 0,
                            Iron = 0,
                            Wheat = 0,
                            Wood = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Gold = 10,
                            Iron = 15,
                            Wheat = 20,
                            Wood = 80
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Gold = 0,
                            Iron = 0,
                            Wheat = 0,
                            Wood = 2
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Gold = 20,
                            Iron = 20,
                            Wheat = 0,
                            Wood = 100
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Gold = 25,
                            Iron = 25,
                            Wheat = 0,
                            Wood = 120
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Gold = 50,
                            Iron = 100,
                            Wheat = 0,
                            Wood = 150
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Gold = 60,
                            Iron = 120,
                            Wheat = 0,
                            Wood = 180
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Gold = 70,
                            Iron = 150,
                            Wheat = 0,
                            Wood = 200
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Gold = 20,
                            Iron = 30,
                            Wheat = 25,
                            Wood = 30
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Gold = 15,
                            Iron = 20,
                            Wheat = 25,
                            Wood = 50
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Gold = 60,
                            Iron = 60,
                            Wheat = 30,
                            Wood = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Gold = 70,
                            Iron = 80,
                            Wheat = 30,
                            Wood = 0
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JwtToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("User", "mas");
                });

            modelBuilder.Entity("api.Models.Village", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvailableResourcesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrestImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailableResourcesId")
                        .IsUnique();

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("PositionX", "PositionY")
                        .IsUnique();

                    b.ToTable("Village", "mas");
                });

            modelBuilder.Entity("api.Models.BuildingBarracks", b =>
                {
                    b.HasBaseType("api.Models.Building");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ImageUrl = "http://localhost:4200/buildings/barracks.svg",
                            MaxInVillage = 1,
                            Name = "Barracks",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ImageUrl = "http://localhost:4200/buildings/fortress.svg",
                            MaxInVillage = 1,
                            Name = "University of military tactics",
                            Type = 0
                        });
                });

            modelBuilder.Entity("api.Models.BuildingResources", b =>
                {
                    b.HasBaseType("api.Models.Building");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ImageUrl = "http://localhost:4200/buildings/gold_mine.svg",
                            MaxInVillage = 2,
                            Name = "Gold mine",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ImageUrl = "http://localhost:4200/buildings/iron_mine.svg",
                            MaxInVillage = 2,
                            Name = "Iron mine",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ImageUrl = "http://localhost:4200/buildings/farm.svg",
                            MaxInVillage = 2,
                            Name = "Farm",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ImageUrl = "http://localhost:4200/buildings/woodcutters_hut.svg",
                            MaxInVillage = 2,
                            Name = "Woodcutter's hut",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Assistant", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("api.Models.Village", null)
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MilitaryUnitTrainableInBarracks", b =>
                {
                    b.HasOne("api.Models.BuildingBarracks", null)
                        .WithMany()
                        .HasForeignKey("BuildingBarracksId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("api.Models.MilitaryUnit", null)
                        .WithMany()
                        .HasForeignKey("MilitaryUnitId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.BuildingInVillage", b =>
                {
                    b.HasOne("api.Models.Building", "Building")
                        .WithMany("InVillages")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Village", "Village")
                        .WithMany("Buildings")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("api.Models.BuildingLevel", b =>
                {
                    b.HasOne("api.Models.Building", "Building")
                        .WithMany("Levels")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Resources", "ResourcesCost")
                        .WithOne("ResourcesCostNavigation")
                        .HasForeignKey("api.Models.BuildingLevel", "ResourcesCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Resources", "ResourcesProductionPerMinute")
                        .WithOne("ResourcesProductionNavigation")
                        .HasForeignKey("api.Models.BuildingLevel", "ResourcesProductionPerMinuteId");

                    b.Navigation("Building");

                    b.Navigation("ResourcesCost");

                    b.Navigation("ResourcesProductionPerMinute");
                });

            modelBuilder.Entity("api.Models.BuildingsQueue", b =>
                {
                    b.HasOne("api.Models.BuildingInVillage", "BuildingInVillage")
                        .WithMany("BuildingQueue")
                        .HasForeignKey("BuildingInVillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingInVillage");
                });

            modelBuilder.Entity("api.Models.MilitaryUnit", b =>
                {
                    b.HasOne("api.Models.Resources", "TrainingCost")
                        .WithOne("MilitaryUnit")
                        .HasForeignKey("api.Models.MilitaryUnit", "TrainingCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingCost");
                });

            modelBuilder.Entity("api.Models.MilitaryUnitsInVillage", b =>
                {
                    b.HasOne("api.Models.MilitaryUnit", "MilitaryUnit")
                        .WithMany("MilitaryUnitsInVillages")
                        .HasForeignKey("MilitaryUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Village", "Village")
                        .WithMany("MilitaryUnits")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MilitaryUnit");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("api.Models.MilitaryUnitsQueue", b =>
                {
                    b.HasOne("api.Models.MilitaryUnit", "MilitaryUnit")
                        .WithMany("MilitaryUnitsQueues")
                        .HasForeignKey("MilitaryUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Village", "Village")
                        .WithMany("MilitaryUnitsQueue")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MilitaryUnit");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("api.Models.Village", b =>
                {
                    b.HasOne("api.Models.Resources", "AvailableResources")
                        .WithOne("Village")
                        .HasForeignKey("api.Models.Village", "AvailableResourcesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Owner")
                        .WithOne("OwnedVillage")
                        .HasForeignKey("api.Models.Village", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Location", "Location")
                        .WithOne("Village")
                        .HasForeignKey("api.Models.Village", "PositionX", "PositionY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableResources");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("api.Models.Building", b =>
                {
                    b.Navigation("InVillages");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("api.Models.BuildingInVillage", b =>
                {
                    b.Navigation("BuildingQueue");
                });

            modelBuilder.Entity("api.Models.Location", b =>
                {
                    b.Navigation("Village");
                });

            modelBuilder.Entity("api.Models.MilitaryUnit", b =>
                {
                    b.Navigation("MilitaryUnitsInVillages");

                    b.Navigation("MilitaryUnitsQueues");
                });

            modelBuilder.Entity("api.Models.Resources", b =>
                {
                    b.Navigation("MilitaryUnit");

                    b.Navigation("ResourcesCostNavigation");

                    b.Navigation("ResourcesProductionNavigation");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("OwnedVillage")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Village", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("MilitaryUnits");

                    b.Navigation("MilitaryUnitsQueue");
                });
#pragma warning restore 612, 618
        }
    }
}
